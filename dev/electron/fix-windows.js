#!/usr/bin/env node
const { execSync } = require('child_process');
const fs = require('fs');

const ELECTRON_VERSION = '28.3.3'; // ajuste se mudar
const MODULES = ['sqlite3', 'pg', 'mysql2']; // m√≥dulos que precisam rebuild

console.log('üîß [EAATA FIX] Preparando ambiente para Windows...');

try {
  // 1Ô∏è‚É£ Verifica se est√° no Windows
  if (process.platform !== 'win32') {
    console.log('‚úÖ N√£o est√° no Windows, n√£o precisa rodar este fix.');
    process.exit(0);
  }

  // 2Ô∏è‚É£ Verifica se Visual Studio Build Tools est√£o instaladas
  console.log('üõ†Ô∏è  Verificando Visual Studio Build Tools...');
  const vswhere = `"C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe"`;
  if (!fs.existsSync(vswhere.replace(/"/g, ''))) {
    console.log('‚ö†Ô∏è  Visual Studio Build Tools n√£o encontradas. Instalando...');
    execSync('npm install --global --production windows-build-tools', { stdio: 'inherit' });
  } else {
    console.log('‚úÖ Visual Studio Build Tools detectadas.');
  }

  // 3Ô∏è‚É£ Executa electron-rebuild com lista de m√≥dulos separada por v√≠rgula
  console.log(`üì¶ Rebuild para Electron v${ELECTRON_VERSION}`);
  const moduleList = MODULES.join(',');
  execSync(`npx electron-rebuild -v ${ELECTRON_VERSION} -f ${moduleList}`, { stdio: 'inherit' });

  console.log('‚úÖ Tudo pronto! Agora sqlite3, pg e mysql2 est√£o compilados para Electron.');
} catch (err) {
  console.error('‚ùå Erro ao preparar o ambiente:', err.message);
  process.exit(1);
}
